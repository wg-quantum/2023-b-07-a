Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 168, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# from qiskit.utils import QuantumInstance
# from qiskit_machine_learning.algorithms.distribution_learners import NumPyDiscriminator, PyTorchDiscriminator


init_params = [3.0, 1.0, 0.6, 1.6]

qgan.set_generator(generator_circuit=g_circuit, generator_init_params=init_params)

# The parameters have an order issue that following is a temp. workaround
qgan._generator._free_parameters = sorted(g_circuit.parameters, key=lambda p: p.name)

discriminator = PyTorchDiscriminator(len(num_qubits))
qgan.set_discriminator(discriminator)

# Set quantum instance to run the quantum generator
quantum_instance = QuantumInstance(
    backend=BasicAer.get_backend("statevector_simulator")
)

result = qgan.run(quantum_instance)

print("Training results:")
print("loss_d :", result["loss_d"])
print("loss_g :", result["loss_d"])
print("rel_entr", result["rel_entr"])

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mMissingOptionalLibraryError[0m               Traceback (most recent call last)
Cell [0;32mIn[7], line 12[0m
[1;32m      9[0m [38;5;66;03m# The parameters have an order issue that following is a temp. workaround[39;00m
[1;32m     10[0m qgan[38;5;241m.[39m_generator[38;5;241m.[39m_free_parameters [38;5;241m=[39m [38;5;28msorted[39m(g_circuit[38;5;241m.[39mparameters, key[38;5;241m=[39m[38;5;28;01mlambda[39;00m p: p[38;5;241m.[39mname)
[0;32m---> 12[0m discriminator [38;5;241m=[39m [43mPyTorchDiscriminator[49m[43m([49m[38;5;28;43mlen[39;49m[43m([49m[43mnum_qubits[49m[43m)[49m[43m)[49m
[1;32m     13[0m qgan[38;5;241m.[39mset_discriminator(discriminator)
[1;32m     15[0m [38;5;66;03m# Set quantum instance to run the quantum generator[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/qiskit/utils/classtools.py:111[0m, in [0;36m_WrappedMethod.__get__.<locals>.out[0;34m(*args, **kwargs)[0m
[1;32m    108[0m [38;5;129m@functools[39m[38;5;241m.[39mwraps(method)
[1;32m    109[0m [38;5;28;01mdef[39;00m [38;5;21mout[39m([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[1;32m    110[0m     [38;5;28;01mfor[39;00m callback [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39m_before:
[0;32m--> 111[0m         [43mcallback[49m[38;5;241;43m.[39;49m[38;5;21;43m__get__[39;49m[43m([49m[43mobj[49m[43m,[49m[43m [49m[43mobjtype[49m[43m)[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    112[0m     retval [38;5;241m=[39m method([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[1;32m    113[0m     [38;5;28;01mfor[39;00m callback [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39m_after:

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/qiskit/utils/lazy_tester.py:39[0m, in [0;36m_RequireNow.__call__[0;34m(self, *_args, **_kwargs)[0m
[1;32m     38[0m [38;5;28;01mdef[39;00m [38;5;21m__call__[39m([38;5;28mself[39m, [38;5;241m*[39m_args, [38;5;241m*[39m[38;5;241m*[39m_kwargs):
[0;32m---> 39[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_tester[49m[38;5;241;43m.[39;49m[43mrequire_now[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_feature[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/qiskit/utils/lazy_tester.py:223[0m, in [0;36mLazyDependencyManager.require_now[0;34m(self, feature)[0m
[1;32m    221[0m [38;5;28;01mif[39;00m [38;5;28mself[39m:
[1;32m    222[0m     [38;5;28;01mreturn[39;00m
[0;32m--> 223[0m [38;5;28;01mraise[39;00m MissingOptionalLibraryError(
[1;32m    224[0m     libname[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_name, name[38;5;241m=[39mfeature, pip_install[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_install, msg[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_msg
[1;32m    225[0m )

[0;31mMissingOptionalLibraryError[0m: "The 'PyTorch' library is required to use 'PyTorchDiscriminator'. You can install it with 'pip install 'qiskit-machine-learning[torch]''."

